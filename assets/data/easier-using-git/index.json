{"hash":"4281aae9595c151b4abc77ca681b7344ab1299d1","data":{"post":{"id":"83579389d8271825acf441e21c0448a2","title":"생각보다 쉬운 Git 사용해보기","content":"<p>이번에는 “git”에 대해서 전문적인 부분이 아닌, 삽질을 조금이나마 줄일 수 있는 기본적인 <mark>백업용도에 대한 사용법</mark>에 대하여 다루려 합니다. 이전부터 “git”은 사용해 왔었습니다만, 백업용으로만 사용해 오고 있었는데… 슬슬 프로젝트에도 제대로(?) 도입을 시켜보기 위해 이런저런 사용법을 조금씩 익히고 있는 중입니다. git, 생각보다 쉬워요. 네. 저도 사용하고 있는걸요.</p>\n<p><img src=\"https://farm9.staticflickr.com/8453/29423992182_8bd228d4af_c.jpg\" alt=\"sapjil-git\"></p>\n<blockquote>\n<p>“git”을 이미 사용중이신 분은 읽어 보실 필요 없다고 생각되며, 전혀 사용해 본적이 없는데 어떻게 사용해 보면 좋을지 모르겠다는 저보다 초보분들을 생각하면서 정리해봤습니다. 이 포스트를 읽는데는 약 3분 정도의 시간을 필요로 합니다.</p>\n</blockquote>\n<p>기본적으로 <strong><a href=\"http://github.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a></strong>를 사용하면 좋겠지만, Private을 희망할 경우 유료입니다.. 아무리 허접한 소스라도 누군가가 볼 수도 있다는 거부감에 유료. 그래서 저는 무료로 사용가능한 <strong><a href=\"http://bitbucket.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bitbucket</a></strong> 서비스를 사용하여 Private 모드로 백업하고 있습니다. </p>\n<p>그저 백업에 중점을 두고 사용해 왔었기 때문에 “git” 에 대해서 전체적으로 다룰 정도로 알고 있지는 않다는 걸 다시한번 상기하시면서…</p>\n<p><strong>table of contents</strong></p>\n<ol>\n<li><a href=\"#Bitbucket%EC%97%90-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Bitbucket에 저장소 만들기</a></li>\n<li><a href=\"#git%EC%9D%98-%EC%9E%91%EC%97%85%ED%9D%90%EB%A6%84\">git의 작업흐름</a></li>\n<li><a href=\"#commit-%ED%95%B4%EB%B3%B4%EA%B8%B0\">commit 해보기</a></li>\n<li><a href=\"#%ED%83%9C%EA%B7%B8-%EA%B1%B8%EC%96%B4%EB%B3%B4%EA%B8%B0\">태그 걸어보기</a></li>\n<li><a href=\"#commit%EC%9D%84-%EC%9E%98%EB%AA%BB%ED%96%88%EB%8B%A4%EB%A9%B4\">commit을 잘못했다면</a></li>\n<li><a href=\"#gitignore-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">gitignore 설정하기</a></li>\n</ol>\n<h2 id=\"bitbucket에-저장소-만들기\"><a href=\"#bitbucket%EC%97%90-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Bitbucket에 저장소 만들기</h2>\n<p>당연한 수순이지만, 온라인상에 파일을 저장해야하니 서비스를 이용하기 위해서 우선은 사이트를 방문하여 계정을 생성합니다. Bitbucket 은 무료로 Private 설정이 가능한 Github 라고 생각하시면 좋을 것 같습니다.</p>\n<p><a href=\"http://bitbucket.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://bitbucket.com</a></p>\n<p>회원가입을 완료하신후 상단 메뉴에서 Repository를 통해 Repository를 생성시킵니다.\n<img src=\"https://c7.staticflickr.com/9/8885/29529917366_658105fae4_b.jpg%22\" alt=\"Create a repository\" title=\"Create a repository — Bitbucket\"></p>\n<p>생성된 이후에 Command line 아래의 I'm starting from scratch을 선택하시면 아래와 같은 형식의 고유의 주소가 생성 되어 있는것을 확인 하실 수 있을겁니다.</p>\n<p><img src=\"https://c5.staticflickr.com/9/8219/28938609284_12fcb02deb_b.jpg%22\" alt=\"_sapjil - Bitbucket\" title=\"_sapjil — Bitbucket\"></p>\n<p>이 주소는 나중에 필요하니 따로 적어 두시거나 주소의 확인이 필요한 경우를 위해 메뉴 위치를 기억해 두시게 좋을것 같습니다.</p>\n<h2 id=\"git의-작업흐름\"><a href=\"#git%EC%9D%98-%EC%9E%91%EC%97%85%ED%9D%90%EB%A6%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>git의 작업흐름</h2>\n<p>“git”은 순차적으로 진행 하였을 경우, 기본적으로 다음과 같은 순서를 경유하게 됩니다.</p>\n<table>\n<thead>\n<tr>\n<th>단계</th>\n<th>저장소</th>\n<th>비고</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>step1</td>\n<td>Working directory</td>\n<td>실제 작업폴더</td>\n</tr>\n<tr>\n<td>step2</td>\n<td>Index(Staging area)</td>\n<td>git에 등록하기 전의 준비 영역</td>\n</tr>\n<tr>\n<td>step3</td>\n<td>HEAD</td>\n<td>최종본을 등록해 두는곳</td>\n</tr>\n<tr>\n<td>step4</td>\n<td>master</td>\n<td>온라인 저장소</td>\n</tr>\n</tbody>\n</table>\n<p>step1 의 작업폴더에서 step2 의 준비영역(staging area)로 파일을 등록합니다. 그리고 step3 으로 최종확정본(commit)을 등록을 하게 됩니다. step3 까지는 오프라인상에서 이루어지는 작업이며 step4 의 <code>push</code>를 통해 온라인상의 <code>master</code>에 등록하게 되면 일련의 작업이 끝나게 됩니다. 쉽죠?</p>\n<p>다시 정리하면.. <mark>step3 까지는 오프라인, step4 부터는 온라인</mark>으로 구분된다고 보시면 됩니다. 즉, 굳이 온라인 저장소에 저장할 필요는 없지만, 버전관리가 필요한 경우 오프라인에서 작업을 진행해도 상관없다고 할 수도 있겠습니다.</p>\n<h2 id=\"commit-해보기\"><a href=\"#commit-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>commit 해보기</h2>\n<p>우선, 프로젝트를 생성합니다.<br>\n터미널을 열고 작업할 폴더(Working directory)를 찾아갑니다.</p>\n<pre><code>$ cd Working-directory\n</code></pre>\n<p>그 다음으로 <code>init</code> 명령어를 사용하여 해당 폴더가 작업영역임을 지정합니다.</p>\n<pre><code>$ git init\n</code></pre>\n<p><code>add &#x3C;파일명></code> 명령어로 작업한 내용을 임시저장소에 등록합니다만, 만일 작업내용 전체를 등록할 경우는 <code>add *</code>를 사용합니다.</p>\n<pre><code>// 해당 파일만 등록할 경우\n$ git add 파일명\n\n// 작업전체를 등록할 경우\n$ git add *\n</code></pre>\n<p>다음에는 작업한 내용에 관한 메모를 <code>-m</code>명령어를 사용하여 기록합니다.</p>\n<pre><code>$ git comment -m \"first comit\"\n</code></pre>\n<p>이제 마지막으로 Bitbucket 에 저장한 내용을 등록할 차례입니다. <code>push</code>명령어를 사용하여 온라인 저장소에 등록을 시작합니다.</p>\n<pre><code>$ git push origin master\n</code></pre>\n<blockquote>\n<p><code>origin</code>, <code>master</code>\n“master” 에는 특별한 의미가 있는 것은 아니며 <code>init</code>명령이 자동으로 생성시키는 이름입니다. 또한 “origin” 역시 특별한 의미가 있는 것은 아니라 <code>clone</code> 명령이 자동으로 만들어주는 리모트 이름입니다.\n<a href=\"https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git 브랜치 - 리모트 브랜치</a> 참조</p>\n</blockquote>\n<p>만약 등록이 이루어지고 있지 않다면 온라인 저장소를 지정해주지 않은 것이 예상되는 경우입니다. 이때는 <code>remote</code> 로 온라인 저장소를 지정해줄 필요가 있습니다.</p>\n<pre><code>$ git remote add origin 온라인 저장소의 URL\n</code></pre>\n<p>위와 같이 저장소를 지정해준 후에 다시 상기의 <code>push</code> 명령어를 실행하시면 업로드 상황을 파악할 수 있습니다.</p>\n<h2 id=\"태그-걸어보기\"><a href=\"#%ED%83%9C%EA%B7%B8-%EA%B1%B8%EC%96%B4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>태그 걸어보기</h2>\n<p>계속 작업을 하다보면 중요한 업데이트가 있었던 때에 표식을 남겨둘 필요가 있습니다.  이력이 길어지면 어디에 어떤 식으로 <code>commit</code> 을 했는지 찾기가 힘들어지기 때문에 중요한 업데이트, 심각한 버그의 수정, 오픈일 등등.. 그럴때 사용하면 좋을 기능입니다.</p>\n<pre><code>$ git tag 태그명\n</code></pre>\n<h2 id=\"commit을-잘못했다면\"><a href=\"#commit%EC%9D%84-%EC%9E%98%EB%AA%BB%ED%96%88%EB%8B%A4%EB%A9%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>commit을 잘못했다면</h2>\n<p>가끔 발생하는 일 입니다만… 실수로 파일을 <code>commit</code> 하였거나 업데이트가 불가능한 경우. 이유도 잘 모르겠다 싶은 경우가 생깁니다. 비슷한 경험들이 있으시겠지만, 이럴때는 가장 최근 작업으로 완전히 돌아가서 작업하는게 속 편할때가 있습니다.\n<code>fetch</code>, <code>reset</code> 으로 깨끗하게(?) 최신이력으로 돌려버립니다.</p>\n<pre><code>$ git fetch origin\n$ git reset --hard origin/master\n</code></pre>\n<blockquote>\n<p><code>reset</code>, <code>--hard</code>\n간단히 설명하면(?) “--hard” 옵션은 “reset” 을 할경우 어디까지 되돌리는지를 결정하는 옵션중의 하나입니다. 또한, “--hard”은 “git” 의 세가지 저장소(HEAD, Index, Working directory)에서 되돌리는 과정중 가장 강력한 옵션입니다. 이처럼 강력한 옵션인 만큼 주의도 필요합니다.\n<a href=\"https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Reset-%EB%AA%85%ED%99%95%ED%9E%88-%EC%95%8C%EA%B3%A0-%EA%B0%80%EA%B8%B0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git 도구 - Reset 명확히 알고 가기</a> 참조</p>\n</blockquote>\n<h2 id=\"gitignore-설정하기\"><a href=\"#gitignore-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>gitignore 설정하기</h2>\n<p><code>ignore</code> 파일을 업데이트 시켜야 하는데 이미 <code>commit</code> 을 해버린 뒤라면 <code>ignore</code> 파일을 작성하여도 적용되지 않는 문제가 발생함으로 이러한 경우는 해당 파일의 체크를 해제한후 <code>ignore</code> 파일에 무시할 규칙을 적용시킨뒤에 다시 <code>commit</code> 하면 문제를 해결 할 수 있습니다.</p>\n<pre><code>$ git rm --cached .DS_Store\n$ git commit -m 'untrack .DS_Store'\n</code></pre>\n<p>이제 파일을 추적하지 않게 되었음으로 <code>.gitignore</code>파일에 필요한 내용을 추가 시킨후 <code>commit</code> 해 주면 됩니다.</p>\n<p>파일이 아닌 폴더를 지정하고 싶은 경우라면 <code>/.DS_Store</code> 처럼 잡아주면 가능합니다. 주로 맥으로 작업을 하다보니 기본적으로 설정해 두는 내용은 아래 정도입니다.</p>\n<pre><code>.DS_Store\nThumbs.db\ndesktop.ini\n</code></pre>\n<p>이외에도 <code>zip</code>, <code>rar</code>같은 압축파일이나 <code>psd</code>, <code>ai</code> 같은 이미지 파일을 적용시켜두기도 합니다.</p>\n<h2 id=\"마치며\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마치며</h2>\n<p>지금까지 날림이긴 합니다만 제가 사용중인 “git”의 사용법에 대해서 언급해 보았습니다. 프로그래머나 자주 사용하시는 분들이 보시기엔 별 도움이 되지 않겠지만, 아직까지 “git”을 사용해 본적이 없었던 분들에게 조금이나마 도움이 되었으면 좋겠습니다.</p>\n","date":"2016/09/10","timeToRead":3}},"context":{}}